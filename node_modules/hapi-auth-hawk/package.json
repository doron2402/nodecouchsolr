{
  "name": "hapi-auth-hawk",
  "description": "Hawk authentication plugin",
  "version": "1.1.1",
  "author": {
    "name": "Eran Hammer",
    "email": "eran@hammer.io",
    "url": "http://hueniverse.com"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/hapijs/hapi-auth-hawk"
  },
  "main": "index",
  "keywords": [
    "hapi",
    "plugin",
    "auth",
    "hawk",
    "bewit"
  ],
  "engines": {
    "node": ">=0.10.30"
  },
  "dependencies": {
    "boom": "2.x.x",
    "hoek": "2.x.x",
    "hawk": "2.x.x"
  },
  "peerDependencies": {
    "hapi": ">=2.x.x"
  },
  "devDependencies": {
    "hapi": "6.x.x",
    "lab": "3.x.x"
  },
  "scripts": {
    "test": "make test-cov"
  },
  "licenses": [
    {
      "type": "BSD",
      "url": "http://github.com/hapijs/hapi-auth-hawk/raw/master/LICENSE"
    }
  ],
  "readme": "### hapi-auth-hawk\n\n[**hapi**](https://github.com/hapijs/hapi) Hawk authentication plugin\n\n[![Build Status](https://secure.travis-ci.org/hapijs/hapi-auth-hawk.png)](http://travis-ci.org/hapijs/hapi-auth-hawk)\n\nLead Maintainer: [Bian Tan](https://github.com/biant)\n\n#### Hawk authentication\n\n[Hawk authentication](https://github.com/hueniverse/hawk) provides a holder-of-key authentication scheme. The scheme supports payload\nauthentication. The scheme requires the following options:\n\n- `getCredentialsFunc` - credential lookup function with the signature `function(id, callback)` where:\n    - `id` - the Hawk credentials identifier.\n    - `callback` - the callback function with signature `function(err, credentials)` where:\n        - `err` - an internal error.\n        - `credentials` - a credentials object passed back to the application in `request.auth.credentials`. Return `null` or `undefined` to\n          indicate unknown credentials (which is not considered an error state).\n- `hawk` - optional protocol options passed to `Hawk.server.authenticate()`.\n\n```javascript\nvar Hapi = require('hapi');\nvar server = new Hapi.Server();\n\nvar credentials = {\n    d74s3nz2873n: {\n        key: 'werxhqb98rpaxn39848xrunpaw3489ruxnpa98w4rxn',\n        algorithm: 'sha256'\n    }\n}\n\nvar getCredentials = function (id, callback) {\n\n    return callback(null, credentials[id]);\n};\n\nserver.pack.require('hapi-auth-hawk', function (err) {\n\n    server.auth.strategy('default', 'hawk', { getCredentialsFunc: getCredentials });\n});\n\n```\n\n#### Bewit authentication\n\n[Bewit authentication](https://github.com/hueniverse/hawk#single-uri-authorization) provides a short-term access to a protected resource by\nincluding a token (bewit) in the request query, issued by an authorized party. Bewit is a subset of the Hawk protocol. The scheme can only\nbe used with 'GET' requests and requires the following options:\n\n- `getCredentialsFunc` - credential lookup function with the signature `function(id, callback)` where:\n    - `id` - the Hawk credentials identifier.\n    - `callback` - the callback function with signature `function(err, credentials)` where:\n        - `err` - an internal error.\n        - `credentials` - a credentials object passed back to the application in `request.auth.credentials`. Return `null` or `undefined` to\n          indicate unknown credentials (which is not considered an error state).\n- `hawk` - optional protocol options passed to `Hawk.server.authenticateBewit()`.\n\n```javascript\nvar Hapi = require('hapi');\nvar server = new Hapi.Server();\n\nvar credentials = {\n    d74s3nz2873n: {\n        key: 'werxhqb98rpaxn39848xrunpaw3489ruxnpa98w4rxn',\n        algorithm: 'sha256'\n    }\n}\n\nvar getCredentials = function (id, callback) {\n\n    return callback(null, credentials[id]);\n};\n\nserver.pack.require('hapi-auth-hawk', function (err) {\n\n    server.auth.strategy('default', 'bewit', { getCredentialsFunc: getCredentials });\n});\n```\n\nTo send an authenticated Bewit request, the URI must contain the `'bewit'` query parameter which can be generated using the Hawk module:\n\n```javascript\nvar Hawk = require('hawk');\n\nvar credentials = {\n    id: 'd74s3nz2873n',\n    key: 'werxhqb98rpaxn39848xrunpaw3489ruxnpa98w4rxn',\n    algorithm: 'sha256'\n};\n\nvar uri = 'http://example.com:8080/endpoint';\nvar bewit = Hawk.client.getBewit(uri, { credentials: credentials, ttlSec: 60 });\nuri += '?bewit=' + bewit;\n```\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/hapijs/hapi-auth-hawk/issues"
  },
  "homepage": "https://github.com/hapijs/hapi-auth-hawk",
  "_id": "hapi-auth-hawk@1.1.1",
  "_from": "hapi-auth-hawk@"
}
